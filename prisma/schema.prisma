generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_HOST")
}

model User {
  userId        Int           @id
  id            String        @unique
  password      String
  mail          String
  name          String
  introduce     String?
  salt          String
  createdAt     DateTime      @default(now())
  profileImage  String
  questionIndex Json? // mySQL은 int[] 같은 Primitive 타입 배열을 직접 지원하지 않음. 즉 JSON형태로 저장해야함.
  
   // 새로운 필드
  coffeeChatCount Int      @default(4)    // 매일 4로 초기화
  todayInterest   Int?                   // 0~3 중 하나의 추천 주제, 매일 null로 초기화

  userTimetable UserTimetable?
  specifyInfo   SpecifyInfo?
  threads       Thread[]
  threadLikes   ThreadLike[]
  threadScraps  ThreadScrap[]
  messages      Message[]
  chatJoins     ChatJoin[]
  comments      Comment[]
  follows       Follow[]
  coffeeChats1  CoffeeChat[]  @relation("FirstUser")
  coffeeChats2  CoffeeChat[]  @relation("SecondUser")
  refreshTokens RefeshToken[]
  categoryMatch CategoryMatch[]
}

model UserTimetable {
  userId    Int     @id
  timetable String?
  user      User    @relation(fields: [userId], references: [userId])
}

model Follow {
  userId      Int  @id
  followingId Int
  followerId  Int
  user        User @relation(fields: [userId], references: [userId])
}

model ChatRoom {
  chatRoomId  Int        @id
  createdAt   DateTime   @default(now())
  createdTime DateTime
  chatJoins   ChatJoin[]
  messages    Message[]
}

model ChatJoin {
  userId     Int
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([userId, chatRoomId])
  @@index([chatRoomId], map: "ChatJoin_chatRoomId_fkey")
}

model Message {
  messageId   Int      @id
  chatRoomId  Int
  userId      Int
  messageBody String
  createdAt   DateTime
  check       Boolean  @default(false)
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  user        User     @relation(fields: [userId], references: [userId])

  @@index([chatRoomId], map: "Message_chatRoomId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Thread {
  threadId     String         @id @default(uuid())
  userId       Int
  type         ThreadType     @default(아티클)
  threadTitle  String
  thradBody    String?
  createdAt    DateTime       @default(now())
  threadShare  Int
  comments     Comment[]
  scraps       ScrapMatch[]
  subjectMatch SubjectMatch[]
  user         User           @relation(fields: [userId], references: [userId])
  images       ThreadImage[]
  likes        ThreadLike[]

  @@index([userId], map: "Thread_userId_fkey")
}

model ThreadImage {
  imageId  String @id @default(uuid())
  threadId String
  thread   Thread @relation(fields: [threadId], references: [threadId])

  @@index([threadId], map: "ThreadImage_threadId_fkey")
}

model ThreadLike {
  threadId String
  userId   Int
  thread   Thread @relation(fields: [threadId], references: [threadId])
  user     User   @relation(fields: [userId], references: [userId])

  @@id([threadId, userId])
  @@index([userId], map: "ThreadLike_userId_fkey")
}

model ThreadScrap {
  scrapId    String       @id @default(uuid())
  userId     Int
  createdAt  DateTime     @default(now())
  scrapMatch ScrapMatch[]
  user       User         @relation(fields: [userId], references: [userId])

  @@index([userId], map: "ThreadScrap_userId_fkey")
}

model ScrapMatch {
  threadId    String
  scrapId     String
  threadScrap ThreadScrap @relation(fields: [scrapId], references: [scrapId])
  thread      Thread      @relation(fields: [threadId], references: [threadId])

  @@id([threadId, scrapId])
  @@index([scrapId], map: "ScrapMatch_scrapId_fkey")
}

model Comment {
  commentId   Int      @id
  userId      Int
  threadId    String
  commentBody String
  quote       Int?
  createdAtD  DateTime @default(now())
  thread      Thread   @relation(fields: [threadId], references: [threadId])
  user        User     @relation(fields: [userId], references: [userId])

  @@index([threadId], map: "Comment_threadId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model ThreadSubject {
  subjectId    Int            @id @default(autoincrement())
  subjectName  SubjectEnum
  subjectMatch SubjectMatch[]
}

model SubjectMatch {
  threadId      String
  subjectId     Int
  threadSubject ThreadSubject @relation(fields: [subjectId], references: [subjectId])
  thread        Thread        @relation(fields: [threadId], references: [threadId])

  @@id([threadId, subjectId])
  @@index([subjectId], map: "SubjectMatch_subjectId_fkey")
}

model Category {
  categotyId    Int             @id @default(autoincrement())
  categoryName  CategoryEnum
  categoryColor String
  categoryMatch CategoryMatch[]
}

model CategoryMatch {
  userId     Int
  categotyId Int
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categotyId], references: [categotyId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([userId, categotyId])
  @@index([categotyId], map: "CategoryMatch_categotyId_fkey")
}

model RefeshToken {
  refreshTokenIndex Int      @id @default(autoincrement())
  userId            Int
  userName          String   @db.VarChar(25)
  tokenHashed       String   @db.VarChar(256)
  createdAt         DateTime
  expiredAt         DateTime
  userAgent         String?
  user              User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "RefeshToken_userId_fkey")
}

model CoffeeChat {
  coffectId    Int      @id
  firstUserId  Int
  secondUserId Int
  coffectDate  DateTime
  location     String
  message      String?
  createdAt    DateTime @default(now())
  valid        Boolean  @default(false)
  firstUser    User     @relation("FirstUser", fields: [firstUserId], references: [userId])
  secondUser   User     @relation("SecondUser", fields: [secondUserId], references: [userId])

  @@index([firstUserId], map: "CoffeeChat_firstUserId_fkey")
  @@index([secondUserId], map: "CoffeeChat_secondUserId_fkey")
}

model SpecifyInfo {
  userId Int   @id
  info   Json?
  user   User  @relation(fields: [userId], references: [userId])
}

model UnivCert {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(50)
  certCode  Int
  createdAt DateTime @db.DateTime(0) @default(now())
  expiredAt DateTime @db.DateTime(0)
}

model UnivList {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  created_at  DateTime? @db.DateTime(0)
  updataed_at DateTime? @db.DateTime(0)
  domain      String?   @db.VarChar(30)
}

enum ThreadType {
  아티클
  팀원모집
  질문
}

enum SubjectEnum {
  프로덕트
  개발
  디자인
  기획
  인사이트
  취업
  창업
  학교
}

enum CategoryEnum {
  창업
  개발
  디자인
  기획
  AI
  글쓰기
  독서
  마케팅
  여행
  데이터
  분석
  하드웨어
  영화
  외국어
  악기
  네트워킹
}
