generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_LOCAL") //TODO: commit전에 수정할것
  
}

model User {
  userId        Int           @id
  id            String        @unique
  password      String
  mail          String
  name          String
  introduce     String?
  salt          String
  createdAt     DateTime      @default(now())
  profileImage  String
  questionIndex Json? // mySQL은 int[] 같은 Primitive 타입 배열을 직접 지원하지 않음. 즉 JSON형태로 저장해야함.

  userTimetable UserTimetable?
  specifyInfo   SpecifyInfo?
  threads       Thread[]
  threadLikes   ThreadLike[]
  threadScraps  ThreadScrap[]
  messages      Message[]
  chatJoins     ChatJoin[]
  comments      Comment[]
  follows       Follow[]
  coffeeChats1  CoffeeChat[]  @relation("FirstUser")
  coffeeChats2  CoffeeChat[]  @relation("SecondUser")
  refreshTokens RefeshToken[]
  categoryMatch CategoryMatch[]
}

model UserTimetable {
  userId    Int     @id
  timetable String?

  user User @relation(fields: [userId], references: [userId])
}

model Follow {
  userId      Int @id
  followingId Int
  followerId  Int

  user User @relation(fields: [userId], references: [userId])
}

model ChatRoom {
  chatRoomId  Int        @id
  createdAt   DateTime   @default(now())
  createdTime DateTime

  chatJoins ChatJoin[]
  messages  Message[]
}

model ChatJoin {
  userId     Int
  chatRoomId Int

  user      User     @relation(fields: [userId], references: [userId])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])

  @@id([userId, chatRoomId])
}

model Message {
  messageId  Int      @id
  chatRoomId Int
  userId     Int
  messageBody String
  createdAt   DateTime
  check       Boolean @default(false)

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  user     User     @relation(fields: [userId], references: [userId])
}

model Thread {
  threadId     String         @id @default(uuid())
  userId       Int
  type         ThreadType     @default(아티클)
  threadTitle  String
  thradBody    String?
  createdAt    DateTime       @default(now())
  threadShare  Int

  user         User           @relation(fields: [userId], references: [userId])
  images       ThreadImage[]
  likes        ThreadLike[]
  scraps       ScrapMatch[]
  comments     Comment[]
  subjectMatch SubjectMatch[]
}

model ThreadImage {
  imageId  String @id @default(uuid())
  threadId String

  thread Thread @relation(fields: [threadId], references: [threadId])
}

model ThreadLike {
  threadId String
  userId   Int

  thread Thread @relation(fields: [threadId], references: [threadId])
  user   User   @relation(fields: [userId], references: [userId])

  @@id([threadId, userId])
}

model ThreadScrap {
  scrapId   String   @id @default(uuid())
  userId    Int
  createdAt DateTime @default(now())

  user       User        @relation(fields: [userId], references: [userId])
  scrapMatch ScrapMatch[]
}

model ScrapMatch {
  threadId String
  scrapId  String

  thread    Thread      @relation(fields: [threadId], references: [threadId])
  threadScrap ThreadScrap @relation(fields: [scrapId], references: [scrapId])

  @@id([threadId, scrapId])
}

model Comment {
  commentId   Int     @id
  userId      Int
  threadId    String
  commentBody String
  quote       Int?
  createdAtD  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [userId])
  thread Thread @relation(fields: [threadId], references: [threadId])
}

model ThreadSubject {
  subjectId   Int          @id @default(autoincrement())
  subjectName SubjectEnum

  subjectMatch SubjectMatch[]
}

model SubjectMatch {
  threadId  String
  subjectId Int

  thread      Thread        @relation(fields: [threadId], references: [threadId])
  threadSubject ThreadSubject @relation(fields: [subjectId], references: [subjectId])

  @@id([threadId, subjectId])
}

model Category {
  categotyId    Int             @id @default(autoincrement())
  categoryName  CategoryEnum
  categoryColor String

  categoryMatch CategoryMatch[]
}

model CategoryMatch {
  userId     Int
  categotyId Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [userId])
  category Category @relation(fields: [categotyId], references: [categotyId])

  @@id([userId, categotyId])
}

model RefeshToken {
  Key         String   @id
  userId      Int
  tokenHashed String
  createdAt   DateTime
  expiredAt   DateTime
  userAgent   String?
  ipAddress   String?

  user User @relation(fields: [userId], references: [userId])
}

model CoffeeChat {
  coffectId     Int      @id
  firstUserId   Int
  secondUserId  Int
  coffectDate   DateTime
  location      String
  message       String?
  createdAt     DateTime @default(now())
  valid         Boolean  @default(false)

  firstUser  User @relation("FirstUser", fields: [firstUserId], references: [userId])
  secondUser User @relation("SecondUser", fields: [secondUserId], references: [userId])
}

model SpecifyInfo {
  userId Int     @id
  info   Json? // mySQL은 string[] 같은 Primitive 타입 배열을 직접 지원하지 않음. 즉 JSON형태로 저장해야함.

  user User @relation(fields: [userId], references: [userId])
}

enum ThreadType {
  아티클
  팀원모집
  질문
}

enum SubjectEnum {
  프로덕트
  개발  
  디자인
  기획
  인사이트
  취업
  창업
  학교
}

enum CategoryEnum {
  창업
  개발
  디자인
  기획
  AI
  글쓰기
  독서
  마케팅  
  여행
  데이터
  분석
  하드웨어
  영화
  외국어
  악기
  네트워킹
}