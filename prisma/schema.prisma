generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_HOST")
}

model User {
  userId             Int             @id @default(autoincrement())
  id                 String          @unique
  password           String
  mail               String
  name               String
  introduce          String?
  salt               String
  createdAt          DateTime        @default(now())
  profileImage       String
  questionIndex      Json?
  coffeeChatCount    Int             @default(4)
  todayInterest      Int?            @default(0)
  todayInterestArray Json?
  dept               String?         @db.VarChar(20)
  studentId          Int?
  univId             Int?
  categoryMatch      CategoryMatch[]
  chatJoins          ChatJoin[]
  coffeeChats1       CoffeeChat[]    @relation("FirstUser")
  coffeeChats2       CoffeeChat[]    @relation("SecondUser")
  comments           Comment[]
  followers          Follow[]        @relation("UserFollows")
  following          Follow[]        @relation("UserFollowings")
  messages           Message[]
  refreshTokens      RefeshToken?
  specifyInfo        SpecifyInfo?
  threads            Thread[]
  threadLikes        ThreadLike[]
  threadScraps       ThreadScrap[]
  UnivList           UnivList?       @relation(fields: [univId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_UnivList__fk")

  @@index([univId], map: "User_UnivList__fk")
}

model UserTimetable {
  userId    Int     @id
  timetable String?
}

model Follow {
  id          Int  @id @default(autoincrement())
  followingId Int
  followerId  Int
  follower    User @relation("UserFollows", fields: [followerId], references: [userId], onDelete: Cascade, map: "fk_follow_follower")
  following   User @relation("UserFollowings", fields: [followingId], references: [userId], onDelete: Cascade, map: "fk_follow_following")

  @@unique([followerId, followingId], map: "unique_follow")
  @@index([followerId])
  @@index([followingId])
  @@index([followerId], map: "idx_follow_follower")
  @@index([followingId], map: "idx_follow_following")
}

model ChatRoom {
  chatRoomId  Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  createdTime DateTime
  chatJoins   ChatJoin[]
  messages    Message[]
}

model ChatJoin {
  userId     Int
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([userId, chatRoomId])
  @@index([chatRoomId], map: "ChatJoin_chatRoomId_fkey")
}

model Message {
  messageId   Int      @id @default(autoincrement())
  chatRoomId  Int
  userId      Int
  messageBody String
  createdAt   DateTime
  check       Boolean  @default(false)
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  user        User     @relation(fields: [userId], references: [userId])

  @@index([chatRoomId], map: "Message_chatRoomId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Thread {
  threadId     String         @id @default(uuid())
  userId       Int
  type         Thread_type    @default(아티클)
  threadTitle  String
  thradBody    String?
  createdAt    DateTime       @unique(map: "ThreadCreatedAtUnique") @default(now())
  threadShare  Int
  comments     Comment[]
  scraps       ScrapMatch[]
  subjectMatch SubjectMatch[]
  user         User           @relation(fields: [userId], references: [userId])
  images       ThreadImage[]
  likes        ThreadLike[]

  @@index([userId], map: "Thread_userId_fkey")
}

model ThreadImage {
  imageId  String @id @default(uuid())
  threadId String
  thread   Thread @relation(fields: [threadId], references: [threadId])

  @@index([threadId], map: "ThreadImage_threadId_fkey")
}

model ThreadLike {
  threadId String
  userId   Int
  thread   Thread @relation(fields: [threadId], references: [threadId])
  user     User   @relation(fields: [userId], references: [userId])

  @@id([threadId, userId])
  @@index([userId], map: "ThreadLike_userId_fkey")
}

model ThreadScrap {
  scrapId    String       @id @default(uuid())
  userId     Int
  createdAt  DateTime     @default(now())
  scrapMatch ScrapMatch[]
  user       User         @relation(fields: [userId], references: [userId])

  @@index([userId], map: "ThreadScrap_userId_fkey")
}

model ScrapMatch {
  threadId    String
  scrapId     String
  threadScrap ThreadScrap @relation(fields: [scrapId], references: [scrapId])
  thread      Thread      @relation(fields: [threadId], references: [threadId])

  @@id([threadId, scrapId])
  @@index([scrapId], map: "ScrapMatch_scrapId_fkey")
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  userId      Int
  threadId    String
  commentBody String
  quote       Int?
  createdAtD  DateTime @default(now())
  thread      Thread   @relation(fields: [threadId], references: [threadId])
  user        User     @relation(fields: [userId], references: [userId])

  @@index([threadId], map: "Comment_threadId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model ThreadSubject {
  subjectId    Int                       @id @default(autoincrement())
  subjectName  ThreadSubject_subjectName
  subjectMatch SubjectMatch[]
}

model SubjectMatch {
  threadId      String
  subjectId     Int
  threadSubject ThreadSubject @relation(fields: [subjectId], references: [subjectId])
  thread        Thread        @relation(fields: [threadId], references: [threadId])

  @@id([threadId, subjectId])
  @@index([subjectId], map: "SubjectMatch_subjectId_fkey")
}

model Category {
  categoryId    Int             @id @default(autoincrement())
  categoryColor String
  categoryName  String          @db.VarChar(255)
  categoryMatch CategoryMatch[]
}

model CategoryMatch {
  userId     Int
  categotyId Int
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categotyId], references: [categoryId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([userId, categotyId])
  @@index([categotyId], map: "CategoryMatch_categotyId_fkey")
}

model RefeshToken {
  refreshTokenIndex Int      @id @default(autoincrement())
  userId            Int      @unique
  userName          String   @db.VarChar(25)
  tokenHashed       String   @db.VarChar(256)
  createdAt         DateTime
  expiredAt         DateTime
  userAgent         String?
  user              User     @relation(fields: [userId], references: [userId])
}

model CoffeeChat {
  coffectId    Int      @id @default(autoincrement())
  firstUserId  Int
  secondUserId Int
  coffectDate  DateTime
  location     String
  message      String?
  createdAt    DateTime @default(now())
  valid        Boolean  @default(false)
  firstUser    User     @relation("FirstUser", fields: [firstUserId], references: [userId])
  secondUser   User     @relation("SecondUser", fields: [secondUserId], references: [userId])

  @@index([firstUserId], map: "CoffeeChat_firstUserId_fkey")
  @@index([secondUserId], map: "CoffeeChat_secondUserId_fkey")
}

model SpecifyInfo {
  userId Int   @id
  info   Json?
  user   User  @relation(fields: [userId], references: [userId])
}

model UnivCert {
  id        Int      @id @default(autoincrement())
  email     String   @unique(map: "email") @db.VarChar(50)
  certCode  Int
  createdAt DateTime @db.DateTime(0)
  expiredAt DateTime @db.DateTime(0)
  valid     Boolean
}

model UnivList {
  id           Int       @id @default(autoincrement())
  name         String    @unique(map: "name") @db.VarChar(100)
  created_at   DateTime? @default(now()) @db.DateTime(0)
  updated_at   DateTime? @default(now()) @db.DateTime(0)
  name_initial String?   @db.VarChar(50)
  location     String?   @db.VarChar(100)
  User         User[]
}

model UnivDept {
  id       Int    @id @default(autoincrement())
  location String @db.VarChar(20)
  univ     String @db.VarChar(20)
  college  String @db.VarChar(20)
  dept     String @db.VarChar(30)
  isMain   String @db.VarChar(5)
}

enum ThreadSubject_subjectName {
  프로덕트 @map("프로덕트")
  개발 @map("개발")
  디자인 @map("디자인")
  기획 @map("기획")
  인사이트 @map("인사이트")
  취업 @map("취업")
  창업 @map("창업")
  학교 @map("학교")
  기타 @map("기타")
}

enum Thread_type {
  아티클 @map("아티클")
  팀원모집 @map("팀원모집")
  질문 @map("질문")
  도움_필요 @map("도움 필요")
  후기글 @map("후기글")
  팁_공유 @map("팁 공유")
}
