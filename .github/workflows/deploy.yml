name: deploy-main

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat > ~/.ssh/config << EOF
          Host playground-umc-8th
            HostName ${{ secrets.EC2_HOST }}
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          EOF

      - name: Test SSH Connection
        run: ssh -vvv playground-umc-8th "echo '✅ SSH Connection Successful'"

      - name: Check for package.json changes
        id: check-package
        run: |
          CHANGED=$(git diff HEAD^1 --name-only | grep "package.json" || echo "")
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT

      - name: Get package-lock.json hash
        id: package-lock-hash
        run: |
          if ssh playground-umc-8th "test -f /home/ubuntu/coffect-BE/package-lock.json"; then
            REMOTE_HASH=$(ssh playground-umc-8th "md5sum /home/ubuntu/coffect-BE/package-lock.json | cut -d' ' -f1")
            LOCAL_HASH=$(md5sum package-lock.json | cut -d' ' -f1)
            if [ "$REMOTE_HASH" != "$LOCAL_HASH" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Sync Changed Files
        run: |
          ssh playground-umc-8th 'mkdir -p /home/ubuntu/coffect-BE'
          git diff --name-only HEAD^1 HEAD | while read file; do
            if [ -f "$file" ] || [ -d "$file" ]; then
              rsync -avzr --relative "$file" playground-umc-8th:/home/ubuntu/coffect-BE/
            fi
          done

      - name: Install Dependencies if needed
        if: steps.check-package.outputs.changed != '' || steps.package-lock-hash.outputs.changed == 'true'
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            npm install
          '

      - name: Create or Update .env file
        run: |
          ssh playground-umc-8th "cat > /home/ubuntu/coffect-BE/.env << EOF
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          
          EC2_PORT=${{ secrets.EC2_PORT }}
          EOF
          "

      - name: Verify Environment Setup
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            echo "=== Directory contents ==="
            ls -la
            echo "=== .env file exists ==="
            test -f .env && echo "✅ .env file exists" || echo "❌ .env file missing"
            echo "=== package.json scripts ==="
            if [ -f package.json ]; then
              cat package.json | grep -A 10 "scripts"
            else
              echo "❌ package.json not found"
            fi
          '

      - name: Build on Server
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            npm run build
          '

      - name: Stop Existing Application
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            # PID 파일이 있다면 해당 프로세스만 종료
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if kill -0 $PID 2>/dev/null; then
                echo "Stopping existing application (PID: $PID)"
                kill $PID
                sleep 5
                # 강제 종료가 필요한 경우
                if kill -0 $PID 2>/dev/null; then
                  kill -9 $PID
                fi
              fi
              rm -f app.pid
            else
              # PID 파일이 없는 경우 포트 기반으로 프로세스 찾기
              if [ ! -z "${{ secrets.EC2_PORT }}" ]; then
                PID=$(lsof -ti:${{ secrets.EC2_PORT }} | head -1)
                if [ ! -z "$PID" ]; then
                  echo "Stopping process on port ${{ secrets.EC2_PORT }} (PID: $PID)"
                  kill $PID
                  sleep 5
                fi
              fi
            fi
          '

      - name: Start Application
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            # 로그 디렉토리 생성
            mkdir -p logs
            
            # 애플리케이션 시작 (PID 저장)
            nohup npm run start > logs/app.log 2> logs/app.error.log &
            APP_PID=$!
            echo $APP_PID > app.pid
            
            echo "Application started with PID: $APP_PID"
            
            # 잠시 대기 후 프로세스 상태 확인
            sleep 3
            if kill -0 $APP_PID 2>/dev/null; then
              echo "✅ Application process is running"
            else
              echo "❌ Application process died immediately"
              exit 1
            fi
          '

      - name: Health Check
        run: |
          ssh playground-umc-8th '
            cd /home/ubuntu/coffect-BE
            
            # 최대 30초 동안 애플리케이션 시작 대기
            for i in {1..6}; do
              sleep 5
              echo "Health check attempt $i/6..."
              
              # PID 확인
              if [ -f app.pid ]; then
                PID=$(cat app.pid)
                if kill -0 $PID 2>/dev/null; then
                  echo "✅ Process is running (PID: $PID)"
                  
                  # 포트 리스닝 확인 (EC2_PORT가 설정된 경우)
                  if [ ! -z "${{ secrets.EC2_PORT }}" ]; then
                    if netstat -ln | grep ":${{ secrets.EC2_PORT }}" > /dev/null; then
                      echo "✅ Application is listening on port ${{ secrets.EC2_PORT }}"
                      exit 0
                    else
                      echo "⏳ Waiting for application to start listening on port ${{ secrets.EC2_PORT }}..."
                    fi
                  else
                    echo "✅ Application appears to be running"
                    exit 0
                  fi
                else
                  echo "❌ Process died (PID: $PID)"
                  break
                fi
              else
                echo "❌ PID file not found"
                break
              fi
            done
            
            # 실패한 경우 로그 출력
            echo "❌ Application failed to start properly"
            echo "=== Application Log ==="
            if [ -f logs/app.log ]; then
              tail -20 logs/app.log
            else
              echo "No application log found"
            fi
            
            echo "=== Error Log ==="
            if [ -f logs/app.error.log ]; then
              tail -20 logs/app.error.log
            else
              echo "No error log found"
            fi
            
            exit 1
          '